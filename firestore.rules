rules_version = '2';

// Firestore Security Rules for COMBO Music App
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData() {
      return request.resource.data.keys().hasAll(['uid', 'email']) &&
             request.resource.data.uid is string &&
             request.resource.data.email is string;
    }

    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() &&
                   isValidUserData() &&
                   request.resource.data.uid == request.auth.uid;
    }

    // Playlists collection
    match /playlists/{playlistId} {
      // Anyone can read public playlists
      allow read: if resource.data.isPublic == true || isOwner(resource.data.userId);

      // Only authenticated users can create playlists
      allow create: if isAuthenticated() &&
                   request.resource.data.keys().hasAll(['userId', 'title']) &&
                   request.resource.data.userId == request.auth.uid;

      // Only playlist owners can update/delete their playlists
      allow update, delete: if isOwner(resource.data.userId);

      // Subcollections (tracks, likedBy, etc.)
      match /tracks/{trackId} {
        allow read: if resource.data.get('isPublic', false) == true || isOwner(get(/databases/$(database)/documents/playlists/$(playlistId)).data.userId);
        allow write: if isOwner(get(/databases/$(database)/documents/playlists/$(playlistId)).data.userId);
      }
    }

    // Listening history - private to user
    match /users/{userId}/listeningHistory/{historyId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // Liked tracks - private to user
    match /users/{userId}/likedTracks/{trackId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // Recently played - private to user
    match /users/{userId}/recentlyPlayed/{trackId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // User preferences - private to user
    match /users/{userId}/preferences/{preferenceId} {
      allow read, write: if isOwner(userId);
    }

    // Analytics data - read-only for users, write-only for system
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side writes
    }

    // Global read access for public data (genres, trending, etc.)
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
