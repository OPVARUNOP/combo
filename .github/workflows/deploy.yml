name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: combo-624e1
  SERVICE_NAME: combo-backend
  REGION: us-central1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build --if-present

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Configure Docker and Artifact Registry
        run: |
          # Configure Docker to use gcloud as a credential helper
          gcloud auth configure-docker --quiet us-central1-docker.pkg.dev
          
          # Verify authentication
          echo "Testing Docker authentication..."
          gcloud auth list
          gcloud config get-value project
          
          # Verify Artifact Registry access
          echo "Testing Artifact Registry access..."
          gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} || echo "Warning: Failed to list Artifact Registry repositories"

      - name: Build and push Docker image
        run: |
          # Set the project explicitly
          gcloud config set project ${{ env.PROJECT_ID }}
          
          # Show current directory structure for debugging
          echo "Current directory structure:"
          pwd
          ls -la
          
          # Build and push with more detailed output
          echo "Starting build process in $(pwd)"
          
          # Build and push the image with no log streaming
          echo "Starting build (logs will be available in Cloud Build console)..."
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }},_FIREBASE_DATABASE_SECRET=${{ secrets.FIREBASE_DATABASE_SECRET }},_JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --suppress-logs \
            --no-user-output-enabled \
            --verbosity=debug
          
          echo "Build completed successfully"

      - name: Deploy to Cloud Run
        run: |
          # First, update the service with --clear-env-vars to remove any existing environment variables
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --clear-env-vars || true
            
          # Then deploy the new revision
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/combo-repo/${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --timeout 300 \
            --update-env-vars FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }},FIREBASE_DATABASE_SECRET=${{ secrets.FIREBASE_DATABASE_SECRET }},JWT_SECRET=${{ secrets.JWT_SECRET }},NODE_ENV=production \
            --no-cpu-throttling

      - name: Get service URL
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
          echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "???? Deployment successful!"
          echo "???? Service URL: ${SERVICE_URL}"
